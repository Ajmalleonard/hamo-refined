{"version":3,"file":"index.js","sources":["../../../src/hooks/use-rect/index.js"],"sourcesContent":["import { debounce as _debounce } from 'debounce'\r\nimport { useLayoutEffect } from 'hooks/use-isomorphic-layout-effect'\r\nimport { useRef, useState } from 'react'\r\nimport { useMeasure, useWindowSize } from 'react-use'\r\n\r\nexport function offsetTop(element, accumulator = 0) {\r\n  const top = accumulator + element.offsetTop\r\n  if (element.offsetParent) {\r\n    return offsetTop(element.offsetParent, top)\r\n  }\r\n  return top\r\n}\r\n\r\nexport function offsetLeft(element, accumulator = 0) {\r\n  const left = accumulator + element.offsetLeft\r\n  if (element.offsetParent) {\r\n    return offsetLeft(element.offsetParent, left)\r\n  }\r\n  return left\r\n}\r\n\r\nfunction _useRect(debounce = 1000) {\r\n  const ref = useRef()\r\n  const [refMeasure, { width, height }] = useMeasure()\r\n  const { width: windowWidth, height: windowHeight } = useWindowSize()\r\n  const [left, setLeft] = useState()\r\n  const [top, setTop] = useState()\r\n\r\n  // resize if body height changes\r\n  useLayoutEffect(() => {\r\n    const callback = _debounce(resize, debounce)\r\n    const resizeObserver = new ResizeObserver(callback)\r\n    resizeObserver.observe(document.body)\r\n\r\n    return () => {\r\n      resizeObserver.disconnect()\r\n      callback.flush()\r\n    }\r\n  }, [debounce])\r\n\r\n  const resize = () => {\r\n    if (ref.current) {\r\n      setTop(offsetTop(ref.current))\r\n      setLeft(offsetLeft(ref.current))\r\n    }\r\n  }\r\n\r\n  const compute = (scrollY = 0) => {\r\n    const rect = {\r\n      top: top - scrollY,\r\n      left: left,\r\n      height: height,\r\n      width: width,\r\n      bottom: windowHeight - (top - scrollY + height),\r\n      right: windowWidth - (left + width),\r\n    }\r\n    const inView = rect.top + rect.height > 0 && rect.bottom + rect.height > 0\r\n\r\n    return { ...rect, inView }\r\n  }\r\n\r\n  const setRef = (node) => {\r\n    if (!ref.current) {\r\n      ref.current = node\r\n      refMeasure(node)\r\n      resize()\r\n    }\r\n  }\r\n\r\n  return [setRef, compute]\r\n}\r\n\r\nexport const useRect =\r\n  typeof window !== 'undefined' ? _useRect : () => [() => {}, undefined]\r\n"],"names":["offsetTop","element","accumulator","top","offsetParent","offsetLeft","left","_useRect","debounce","ref","useRef","refMeasure","width","height","useMeasure","windowWidth","windowHeight","useWindowSize","setLeft","useState","setTop","resize","useLayoutEffect","callback","_debounce","resizeObserver","ResizeObserver","observe","document","body","disconnect","flush","current","node","scrollY","rect","bottom","right","inView","useRect","window","undefined"],"mappings":"qNAKO,SAASA,UAAUC,EAASC,EAAc,GACzCC,GAAoBF,EAAQD,UAClC,OAAIC,EAAQG,aACHJ,UAAUC,EAAQG,aAAcD,GAElCA,EAGF,SAASE,WAAWJ,EAASC,EAAc,GAC1CI,GAAqBL,EAAQI,WACnC,OAAIJ,EAAQG,aACHC,WAAWJ,EAAQG,aAAcE,GAEnCA,EAGT,SAASC,SAASC,EAAW,KAC3B,MAAMC,EAAMC,eACN,CAACC,EAAY,CAAEC,MAAAA,EAAOC,OAAAA,IAAYC,sBAClC,CAAEF,MAAOG,EAAaF,OAAQG,GAAiBC,yBAC/C,CAACX,EAAMY,GAAWC,iBAClB,CAAChB,EAAKiB,GAAUD,iBAchBE,GAXNC,0CAAgB,KACd,MAAMC,EAAWC,kBAAUH,EAAQb,GAC7BiB,EAAiB,IAAIC,eAAeH,GAG1C,OAFAE,EAAeE,QAAQC,SAASC,MAEzB,KACLJ,EAAeK,aACfP,EAASQ,UAEV,CAACvB,IAEW,KACTC,EAAIuB,UACNZ,EAAOpB,UAAUS,EAAIuB,UACrBd,EAAQb,WAAWI,EAAIuB,aA0B3B,MAAO,CARQ,IACRvB,EAAIuB,UACPvB,EAAIuB,QAAUC,EACdtB,EAAWsB,GACXZ,MAlBY,CAACa,EAAU,KACzB,IAAMC,EAAO,CACXhC,IAAKA,EAAM+B,EACX5B,KAAMA,EACNO,OAAQA,EACRD,MAAOA,EACPwB,OAAQpB,GAAgBb,EAAM+B,EAAUrB,GACxCwB,MAAOtB,GAAeT,EAAOM,IAEzB0B,EAAkC,EAAzBH,EAAKhC,IAAMgC,EAAKtB,QAA0C,EAA5BsB,EAAKC,OAASD,EAAKtB,OAEhE,MAAO,IAAKsB,EAAMG,OAAAA,KAcV,MAACC,QACO,oBAAXC,OAAyBjC,SAAW,IAAM,CAAC,YAAUkC"}